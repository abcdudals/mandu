<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:websocket="http://www.springframework.org/schema/websocket"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/websocket http://www.springframework.org/schema/websocket/spring-websocket-4.3.xsd
		http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	
	<!-- Enables the Spring MVC @Controller programming model -->
	<!-- <annotation-driven /> -->
	<mvc:annotation-driven />

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<!-- <mvc:resources mapping="/resources/**" location="/resources/" /> -->
	<mvc:resources mapping="/resources/**" location="/resources/" />

	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>
	
	<context:component-scan base-package="com.ymp.mandu, service, util" />
	
<!--1) JDBC Connection -->
	<beans:bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<beans:property name="driverClassName" value="oracle.jdbc.driver.OracleDriver"/>
		<beans:property name="url" value="jdbc:oracle:thin:@127.0.0.1:1521:xe"/>
		<beans:property name="username" value="system"/>
		<beans:property name="password" value="oracle"/>
	</beans:bean>	

<!--2) Mybatis 설정 
	=> SqlSessionFactory -> SqlSessionTemplate 
	2.1) SqlSessionFactory
        - MyBatis 와 연동시  DB 연결과 SQL 실행의 핵심 클래스
        - SqlSessionFactoryBean 에 의해 생성됨 -->	
	<beans:bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<beans:property name="dataSource" ref="dataSource"/>
		<beans:property name="configLocation" value="classpath:/mybatis-config.xml"/>
		<beans:property name="mapperLocations" value="classpath:/mappers/**/*Mapper.xml"/>
	</beans:bean>

<!-- 	** : 없는거 포함 모든 폴더 
		*  : 모든 문자 -->
	
<!-- 2.2) SqlSessionTemplate
        - SqlSession (interface) 구현클래스
        - DAO 의 DB연결 & Close 기능, 
        - Mapper의 Sql 구문을 이용해 DAO의 요청을 처리
        - sqlSessionFactory 를 생성자로 주입해서 설정  -->
	<beans:bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate" destroy-method="clearCache">
		<beans:constructor-arg name="sqlSessionFactory" ref="sqlSessionFactory"/>	
	</beans:bean>
	
<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 	
** Image Upload & Download
       1) Upload : MultipartResolver 설정 -->
	<beans:bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<beans:property name="maxUploadSize" value="-1" />
	</beans:bean>	
	
		
</beans:beans>
